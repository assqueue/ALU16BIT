module boolean (
    input a[16],
    input b[16],
    input alufn[4],
    output boole[16]
  ) {
  
  var i; // To use for loop

  always {
    // AND - alufn[3:0] is 1000
    if (alufn == 4b1000) {
      for (i = 0; i < 16; i++) {
        boole[i] = a[i] & b[i]; // AND -> '&EXPR'
      }
    }
    
    // NAND - alufn[3:0] is 0111
    else if (alufn == 4b0111) {
      for (i = 0; i < 16; i++) {
        boole[i] = ~(a[i] & b[i]); // NAND -> '~&EXPR'
      }
    }
    
    // OR - alufn[3:0] is 1110
    else if (alufn == 4b1110) {
      for (i = 0; i < 16; i++) {
        boole[i] = a[i] | b[i]; // OR -> '|EXPR'
      }
    }
    
    // NOR - alufn[3:0] is 0001
    else if (alufn == 4b0001) {
      for (i = 0; i < 16; i++) {
        boole[i] = ~(a[i] | b[i]); // NOR -> '~|EXPR'
      }
    }
    
    // XOR - alufn[3:0] is 0110
    else if (alufn == 4b0110) {
      for (i = 0; i < 16; i++) {
        boole[i] = a[i] ^ b[i]; // XOR -> '^EXPR'
      }
    }
    
    // XNOR - alufn[3:0] is 1001
    else if (alufn == 4b1001) {
      for (i = 0; i < 16; i++) {
        boole[i] = ~(a[i] ^ b[i]); // XNOR -> '~^EXPR'
      }
    }
    
    // 'a' - alufn[3:0] is 1010
    else if (alufn == 4b1010) {
      for (i = 0; i < 16; i++) {
        boole[i] = a[i]; // 'a' -> a[i]
      }
    }
    
    // 'b'- alufn[3:0] is 1100
    else if (alufn == 4b1100) {
      for (i = 0; i < 16; i++) {
        boole[i] = b[i]; // 'b' -> b[i]
      }
    }
    
    else {
      for (i = 0; i < 16; i++) {
        boole[i] = 0; // 0
      }
    }
  }
}